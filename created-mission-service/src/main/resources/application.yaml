spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BINDER}
          auto-create-topics: true
          required-acks: ${KAFKA_REQUIRED_ACK_MODE}
      bindings:
        result-out-0:
          destination: ${KAFKA_CREATED_MISSION_RESULT_TOPIC}
          contentType: application/json  # JSON 형식으로 처리
        check-in-0:
          destination: ${KAFKA_CHECK_TOPIC}
          contentType: application/json  # JSON 형식으로 처리
          group: ${KAFKA_CONSUME_GROUP}
          consumer:
            max-attempts: ${KAFKA_CONSUME_MAX_ATTEMPTS}
    function:
      definition: check;result


  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: update
server:
  port: 8083

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET_NAME}  # 환경 변수로 치환
      domain-name: ${DOMAIN_NAME}
    region.static: ${AWS_REGION_STATIC}  # 환경 변수로 치환
    credentials:
      access-key: ${AWS_ACCESS_KEY}  # 환경 변수로 치환
      secret-key: ${AWS_SECRET_KEY}  # 환경 변수로 치환

ai:
  endpoints:
    mission-auth: ${AI_ENDPOINTS_MISSION_AUTH}