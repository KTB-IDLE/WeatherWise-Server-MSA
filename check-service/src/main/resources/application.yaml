spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BINDER}
          auto-create-topics: true
          required-acks: ${KAFKA_REQUIRED_ACK_MODE}
      bindings:
        issued-out-0:
          destination: ${KAFKA_ISSUED_TOPIC}
          contentType: application/json  # JSON ???? ??
        resultUser-in-0:
          destination: ${KAFKA_USER_RESULT_TOPIC}
          contentType: application/json  # JSON ???? ??
          group: ${KAFKA_CONSUME_GROUP}
          consumer:
            max-attempts: ${KAFKA_CONSUME_MAX_ATTEMPTS}
        resultCreatedMission-in-0:
          destination: ${KAFKA_CREATED_MISSION_RESULT_TOPIC}
          contentType: application/json  # JSON ???? ??
          group: ${KAFKA_CONSUME_GROUP}
          consumer:
            max-attempts: ${KAFKA_CONSUME_MAX_ATTEMPTS}
    function:
      definition: resultUser;resultCreatedMission;issued

server:
  port: 8086

management:
  metrics:
    enable:
      tomcat: true
  endpoints:
    web:
      exposure:
        include: "*"  # 모든 엔드포인트 노출
  endpoint:
    health:
      show-details: always  # /actuator/health에 상세 정보 표시
  #  endpoint:
  #    health:
  #      show-details: always
  health:
    kafka:
      enabled: false